package ios.bank.generated;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.2.0
 * 2017-11-20T12:17:43.202+01:00
 * Generated source version: 3.2.0
 * 
 */
@WebService(targetNamespace = "http://server.bank.ios/", name = "WebServiceBankInterface")
@XmlSeeAlso({ObjectFactory.class})
public interface WebServiceBankInterface {

    @WebMethod
    @RequestWrapper(localName = "creditMoney", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.CreditMoney")
    @ResponseWrapper(localName = "creditMoneyResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.CreditMoneyResponse")
    @WebResult(name = "return", targetNamespace = "")
    public double creditMoney(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.BankAccount arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        double arg1
    ) throws BankAccountNoExistException_Exception, IncorrectAmountException_Exception;

    @WebMethod
    @RequestWrapper(localName = "removeCustomer", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.RemoveCustomer")
    @ResponseWrapper(localName = "removeCustomerResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.RemoveCustomerResponse")
    public void removeCustomer(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.Customer arg0
    ) throws CustomerNoExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "wireTransfer", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.WireTransfer")
    @ResponseWrapper(localName = "wireTransferResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.WireTransferResponse")
    public void wireTransfer(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.Customer arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        ios.bank.generated.BankAccount arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        ios.bank.generated.Customer arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        ios.bank.generated.BankAccount arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        double arg4
    ) throws BankAccountNoExistException_Exception, CustomerNoExistException_Exception, IncorrectAmountException_Exception, BankAccountNoBelongToCustomer_Exception;

    @WebMethod
    @RequestWrapper(localName = "getCustomer", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.GetCustomer")
    @ResponseWrapper(localName = "getCustomerResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.GetCustomerResponse")
    @WebResult(name = "return", targetNamespace = "")
    public ios.bank.generated.Customer getCustomer(
        @WebParam(name = "arg0", targetNamespace = "")
        java.lang.String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        java.lang.String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        javax.xml.datatype.XMLGregorianCalendar arg2
    ) throws CustomerNoExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "settleAccount", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.SettleAccount")
    @ResponseWrapper(localName = "settleAccountResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.SettleAccountResponse")
    @WebResult(name = "return", targetNamespace = "")
    public double settleAccount(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.BankAccount arg0
    ) throws BankAccountNoExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "getBalance", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.GetBalance")
    @ResponseWrapper(localName = "getBalanceResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.GetBalanceResponse")
    @WebResult(name = "return", targetNamespace = "")
    public double getBalance(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.BankAccount arg0
    ) throws BankAccountNoExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "getBankAccount", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.GetBankAccount")
    @ResponseWrapper(localName = "getBankAccountResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.GetBankAccountResponse")
    @WebResult(name = "return", targetNamespace = "")
    public ios.bank.generated.BankAccount getBankAccount(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.Customer arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        java.lang.String arg1
    ) throws BankAccountNoExistException_Exception, CustomerNoExistException_Exception, BankAccountTypeNoExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "debitMoney", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.DebitMoney")
    @ResponseWrapper(localName = "debitMoneyResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.DebitMoneyResponse")
    @WebResult(name = "return", targetNamespace = "")
    public double debitMoney(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.BankAccount arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        double arg1
    ) throws BankAccountNoExistException_Exception, IncorrectAmountException_Exception;

    @WebMethod
    @RequestWrapper(localName = "internTransfer", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.InternTransfer")
    @ResponseWrapper(localName = "internTransferResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.InternTransferResponse")
    public void internTransfer(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.Customer arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        java.lang.String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        java.lang.String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        double arg3
    ) throws CustomerNoExistException_Exception, BankAccountTypeNoExistForCustomerException_Exception, BankAccountTypeNoExistException_Exception, IncorrectAmountException_Exception;

    @WebMethod
    @RequestWrapper(localName = "createBankAccount", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.CreateBankAccount")
    @ResponseWrapper(localName = "createBankAccountResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.CreateBankAccountResponse")
    @WebResult(name = "return", targetNamespace = "")
    public ios.bank.generated.BankAccount createBankAccount(
        @WebParam(name = "arg0", targetNamespace = "")
        ios.bank.generated.Customer arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        java.lang.String arg1
    ) throws BankAccountAlreadyExistException_Exception, CustomerNoExistException_Exception, BankAccountTypeNoExistException_Exception;

    @WebMethod
    @RequestWrapper(localName = "createCustomer", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.CreateCustomer")
    @ResponseWrapper(localName = "createCustomerResponse", targetNamespace = "http://server.bank.ios/", className = "ios.bank.generated.CreateCustomerResponse")
    @WebResult(name = "return", targetNamespace = "")
    public ios.bank.generated.Customer createCustomer(
        @WebParam(name = "arg0", targetNamespace = "")
        java.lang.String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        java.lang.String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        javax.xml.datatype.XMLGregorianCalendar arg2
    ) throws CustomerAlreadyExistException_Exception;
}
